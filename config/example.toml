# The GitHub user or organisation who owns the repos.
owner = "my_github_organisation"

# Optional: If set to true then Octobors will analyze the repos and print what
# it would do, but not apply any changes.
dry_run = true

# This [[repos]] block may be repeated for each repo you wish to process.

[[repos]]

# The name of the repo to process.
name = "the_repo_name"

# Optional: The label added when a PR does not have a body.
# If this is set PRs require a description to be merged.
needs_description_label = "needs-description"

# The list of status that are required to be passed for the PR to be
# automerged.
required_statuses = ["test", "lint"]

# The label applied when all of the PR's required status checks have passed.
ci_passed_label = "ci-passed"

# Optional: Label applied when a PR has one or more reviewers and all of them
# have approved.
reviewed_label = "reviewed"

# Optional: Label that can be manually added to PRs so as to not block on reviews, for trivial
# changes.
# If a reviewer has submitted a request-changes review *before* the bot merged the PR, then an
# approval review will be required, and the PR won't automatically get merged until then.
# If there's also a `block_merge_label` set, it has priority over this label being set.
#skip_review_label = "trivial"

# Optional: Label that can be manually added to PRs to block automerge.
block_merge_label = "dont-merge"

# Optional: The period in seconds between when a PR can be automerged, and when
# the action actually tries to perform the merge.
automerge_grace_period = 30

# Optional: The method to use for merging the PR, defaults to `merge` if we
# fail to parse or it is unset by the user. Can be "Merge", "Rebase" or
# "Squash".
merge_method = "Rebase"

# Optional: Should the bot try to answer comments when it's mentioned, asking for details why it's
# merged a PR? If set to true, this will cause more requests to the Github APi to fetch comments
# for each pull request.
react_to_comments = false

# Optional: With this setting set to true, a "comment" review  counts as if it
# is requesting changes, even if the user who did it wasn't part of the initial
# reviewers list. Otherwise, comments have no approval value, and commenting
# may be considered as an aborted review request (see also
# https://github.com/EmbarkStudios/octobors/issues/11).
#comment_requests_change = true
